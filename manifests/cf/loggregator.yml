---
meta:
  loggregator:
    endpoint_secret: (( vault meta.vault "/loggregator/endpoint:secret" ))

instance_groups:
  - name: doppler
    jobs:
      - name: doppler
        release: loggregator
        provides:
          doppler: {as: doppler, shared: true}
        properties:
          loggregator:
            tls:
              ca_cert: (( grab meta.certs.loggregator.ca.cert ))
              doppler: (( grab meta.certs.loggregator.doppler )) # .cert & .key

  - name: loggregator_trafficcontroller
    jobs:
    - name: loggregator_trafficcontroller
      release: loggregator
      consumes:
        doppler: {from: doppler}
      properties:
        cc:
          internal_service_hostname: cloud-controller-ng.service.cf.internal
          mutual_tls:
            ca_cert: (( grab meta.certs.cf_internal.cc_tls.ca_cert ))
          tls_port:  (( grab meta.cc.tls_port ))

        loggregator:
          outgoing_cert: (( grab meta.certs.cf_internal.loggregator_trafficcontroller_tls.cert ))
          outgoing_key:  (( grab meta.certs.cf_internal.loggregator_trafficcontroller_tls.key ))
          tls:
            ca_cert:              (( grab meta.certs.loggregator.ca.cert ))
            cc_trafficcontroller: (( grab meta.certs.cf_internal.loggregator_tls_cc_tc )) # .cert and .key
            trafficcontroller:    (( grab meta.certs.loggregator.tc)) # .cert and .key
          uaa:
            client_secret: (( grab meta.uaa.doppler_secret ))

        ssl:
          skip_cert_verify: (( grab params.skip_ssl_validation ))

        system_domain: (( grab params.system_domain ))

        uaa:
          ca_cert:       (( grab meta.certs.uaa.ca.cert ))
          internal_url:  (( grab meta.uaa.internal_url ))

    - name: reverse_log_proxy
      release: loggregator
      provides:
        reverse_log_proxy: {as: reverse_log_proxy, shared: true}
      properties:
        loggregator:
          tls:
            ca_cert:           (( grab meta.certs.loggregator.ca.cert ))
            reverse_log_proxy: (( grab meta.certs.loggregator.rlp )) # .cert & .key

    - name: reverse_log_proxy_gateway
      release: loggregator
      properties:
        http:
          address:            "0.0.0.0:8088"
          cert:               (( grab meta.certs.cf_internal.loggregator_rlp_gateway_tls.cert ))
          key:                (( grab meta.certs.cf_internal.loggregator_rlp_gateway_tls.key ))
        logs_provider:
          ca_cert:            (( grab meta.certs.loggregator.rlp_gateway.ca_cert ))
          client_cert:        (( grab meta.certs.loggregator.rlp_gateway.cert ))
          client_key:         (( grab meta.certs.loggregator.rlp_gateway.key ))
        cc:
          capi_internal_addr: https://cloud-controller-ng.service.cf.internal:9023
          common_name:        cloud-controller-ng.service.cf.internal
          .:                  (( inject meta.certs.cf_internal.loggregator_rlp_gateway_tls_cc )) # .ca_cert, .cert & .key
        uaa:
          ca_cert:            (( grab meta.certs.uaa.ca.cert ))
          client_id:          doppler
          client_secret:      (( grab meta.uaa.doppler_secret ))
          internal_addr:      https://uaa.service.cf.internal:8443
        metrics:
          server_name:        rlp_gateway_metrics
          .:                  (( inject meta.certs.metrics.rlp_gateway_metrics_tls ))

    - name: log-cache
      release: log-cache
      provides:
        log-cache: {shared: true}
      properties:
        health_addr:   localhost:6060
        metrics:
          server_name: "log_cache_metrics"
          .:           (( inject meta.certs.metrics.log_cache_metrics_tls ))
        tls:           (( grab meta.certs.log_cache.server ))

    - name: log-cache-gateway
      release: log-cache
      properties:
        gateway_addr: localhost:8084
        proxy_cert:    (( grab meta.certs.log_cache.proxy_tls.cert ))
        proxy_key:     (( grab meta.certs.log_cache.proxy_tls.key ))
        metrics: 
          server_name: "log_cache_gateway_metrics"
          .:           (( inject meta.certs.metrics.log_cache_gateway_metrics_tls ))

    - name: log-cache-nozzle
      release: log-cache
      consumes:
        reverse_log_proxy: {from: reverse_log_proxy}
      properties:
        logs_provider:
          tls: (( grab meta.certs.loggregator.logs_provider )) # .ca_cert, .cert & .key

    - name: log-cache-cf-auth-proxy
      release: log-cache
      properties:
        cc:
          common_name:   cloud-controller-ng.service.cf.internal
          ca_cert:       (( grab meta.certs.cf_internal.cc_tls.ca_cert ))
        external_cert:   (( grab meta.certs.cf_internal.logcache_ssl.cert ))
        external_key:    (( grab meta.certs.cf_internal.logcache_ssl.key ))
        metrics: 
          server_name:   "log_cache_cf_auth_proxy_metrics"
          .:             (( inject meta.certs.metrics.log_cache_cf_auth_proxy_metrics_tls ))
        proxy_ca_cert:   (( grab meta.certs.log_cache.ca.cert ))
        proxy_port:      8083
        uaa:
          ca_cert:       (( grab meta.certs.uaa.ca.cert ))
          client_id:     doppler
          client_secret: (( grab meta.uaa.doppler_secret ))
          internal_addr: https://uaa.service.cf.internal:8443

    - name: route_registrar
      release: routing
      properties:
        route_registrar:
          routes:
            - name: doppler
              tls_port: 8081
              server_cert_domain_san: (( concat "doppler." params.system_domain ))
              registration_interval: 20s
              uris:
                - (( concat "doppler."   params.system_domain ))
                - (( concat "*.doppler." params.system_domain ))
            - name: log-cache-reverse-proxy
              port: 8083
              tls_port: 8083
              registration_interval: 20s
              server_cert_domain_san: (( concat "log-cache." params.system_domain ))
              uris:
                - (( concat "log-cache."   params.system_domain ))
                - (( concat "*.log-cache." params.system_domain ))
            - name: rlp-gateway
              tls_port: 8088
              registration_interval: 20s
              server_cert_domain_san: (( concat "log-stream." params.system_domain ))
              uris:
                - (( concat "log-stream."   params.system_domain ))
                - (( concat "*.log-stream." params.system_domain ))
